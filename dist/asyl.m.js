import t from"atob";class e{constructor(t){let e,r;for([e,r]of(this.instance=t,this.memory=t.exports.memory,this.dv=new DataView(this.memory.buffer),Object.entries(this.instance.exports)))r instanceof WebAssembly.Memory||(this[e]=r)}alloc(t){throw new Error("Method `alloc` not implemented in WebAssembly module.")}stringNew(t){return this.stringWrite(this.alloc(t.length+1),t)}stringWrite(t,e){for(let r=0;r<e.length;r++)this.dv.setUint8(t+r,e.charCodeAt(r));return this.dv.setUint8(t+e.length,0),t}stringRead(t){let e,r=[];for(;0!=(e=this.dv.getUint8(t++));)r.push(String.fromCharCode(e));return r.join("")}mapFloat32Array(t,e){return new Float32Array(this.memory.buffer,t,e)}}var r={args_get:()=>0,args_sizes_get:()=>0,environ_get:()=>0,environ_sizes_get:()=>0,clock_res_get:()=>0,clock_time_get:()=>0,fd_advise:()=>0,fd_allocate:()=>0,fd_close:()=>0,fd_datasync:()=>0,fd_fdstat_get:()=>0,fd_fdstat_set_flags:()=>0,fd_fdstat_set_rights:()=>0,fd_filestat_get:()=>0,fd_filestat_set_size:()=>0,fd_filestat_set_times:()=>0,fd_pread:()=>0,fd_prestat_get:()=>0,fd_prestat_dir_name:()=>0,fd_pwrite:()=>0,fd_read:()=>0,fd_readdir:()=>0,fd_renumber:()=>0,fd_seek:()=>0,fd_sync:()=>0,fd_tell:()=>0,fd_write:()=>0,path_create_directory:()=>0,path_filestat_get:()=>0,path_filestat_set_times:()=>0,path_link:()=>0,path_open:()=>0,path_readlink:()=>0,path_remove_directory:()=>0,path_rename:()=>0,path_symlink:()=>0,path_unlink_file:()=>0,poll_oneoff:()=>0,proc_exit:()=>0,sched_yield:()=>0,random_get:()=>0,sock_accept:()=>0,sock_recv:()=>0,sock_send:()=>0,sock_shutdown:()=>0};async function s(t,s){const{instance:a}=await WebAssembly.instantiate(t,{env:s??{},wasi_snapshot_preview1:r});return new e(a)}async function a(e,r){return s(function(e){const[,r]=decodeURIComponent(e).split(",",2);return new Uint8Array(Array.from(t(r)).map((t=>t.charCodeAt(0)))).buffer}(e),r)}async function n(t,e){return s(await(await fetch(t)).arrayBuffer(),e)}export{s as loadFromArrayBuffer,a as loadFromDataUri,n as loadFromUrl,e as Module,r as wasi};
//# sourceMappingURL=asyl.m.js.map
